#
# Precis Configuration File, Version 0.1
# 
#


# Precis Input File Name.
#INPUT_DATA_FILE=./data/dataFile.addrSnapdeal_rtoMay1st_to_5th_sanitised
#INPUT_DATA_FILE=./data/dataFile.performanceData
#INPUT_DATA_FILE=./data/dataFile.uciAdultData
#INPUT_DATA_FILE=./data/dataFile.FCData
#INPUT_DATA_FILE=./data/dataFile.cabs7d_cleaned
#INPUT_DATA_FILE=./data/dataFile.Android7dCleaned
#INPUT_DATA_FILE=./data/dataFile.recharge7d_cleaned_withoutGender
#INPUT_DATA_FILE=./data/dataFile.non_rto_fis_output_2016-09-03_aggregated
#INPUT_DATA_FILE=./data/dataFile.rto_fis_output_2016-09-03_aggregated
#INPUT_DATA_FILE=./data/dataFile
INPUT_DATA_FILE=./data/dataFile.hier

# Precis Input Data Schema File.
#INPUT_SCHEMA_FILE=./data/schemaFile.addrSnapdeal_may1st_to_5th
#INPUT_SCHEMA_FILE=./data/schemaFile.performanceData
#INPUT_SCHEMA_FILE=./data/schemaFile.uciAdultData
#INPUT_SCHEMA_FILE=./data/schemaFile.FCData
#INPUT_SCHEMA_FILE=./data/schemaFile.Android7dCleaned
#INPUT_SCHEMA_FILE=./data/schemaFile.non_rto_fis_output_2016-09-03_aggregated
#INPUT_SCHEMA_FILE=./data/schemaFile.rto_fis_output_2016-09-03_aggregated
#INPUT_SCHEMA_FILE=./data/schemaFile
INPUT_SCHEMA_FILE=./data/schemaFile.hier


# Precis Output Files (i.e) Candidates, Raw Candidates (Candidates as bit stream) files etc.
# By default, the Candidate files will only be generated, Raw Candidates will not be generated.
# Generating Output Files are time consuming, it will limit the speed of the Precis Application.
# Raw Candidates are only used to Debug the Precis application. So they are not generated default.
#
OUPUT_DIR=./data/

# Canididates File Pattern,the ${stage_number} will be replaced by actual stage number.
OUPUT_CANDIDATE_FILE_PATTERN=stage_${stage_number}_candidate_file.txt

GENERATE_RAW_CANDIDATE_FILE=false

# Raw Candidates File Pattern, the ${stage_number} will be replaced by actual stage number.
OUPUT_RAW_CANDIDATE_FILE_PATTERN=stage_${stage_number}_raw_candidate_file.txt

# Input File Record Seperator as ASCII, Default is ^A ( Control - A ).
INPUT_RECORD_SEPERATOR=\u0001

# Output Record Seperator, again in ASCII.
OUTPUT_RECORD_SEPERATOR_DIMENSION=\u0001
OUTPUT_RECORD_SEPERATOR_METRIC=\u0003
OUTPUT_RECORD_SEPERATOR_STAGENUMBER=\u0004

# Output Dimension, Value Seperator, Precis will be generated as Combination of various Dimension, Value records.
# Here we are using ^B ( Control - B )
OUTPUT_DIMVAL_SEPERATOR=\u0002

# Want to Run Count Precis on the data set, Default is Metric Precis.
# In Count Precis, Metric Field is also treated as a Dimension.
# Precis is calculated on the Count.
IS_COUNT_PRECIS=false
#In case of count precis, there is no metric field, even the metric will be treated as dim.
COUNT_PRECIS_METRIC_NAME=count
# Threshold - Precis Threshold, Read as Data Type Double.
#default threshold in case we are not using the threshold gen.
THRESHOLD=36000
#use Threshold Generator
USE_THRESHOLD_GEN=true
#Configure precis until level 3 as threshold 1
THRESHOLD_UPTO_LEVEL_3=1
#Upto Level 3 if we want percentage threshold, not the absolutes.
USE_THRESHOLD_PERCENTAGE_UPTO_LEVEL_3=false
#Use thereshold as percentage
USE_THRESHOLD_PERCENTAGE_AFTER_LEVEL_3=true
#Handle different thresholds at different levels post level 3.
#Fixed - 3% support threshold post level 3
#Linear - 1% at level 4, 2% at level 5, 3% at level 6, 4% at level 7 and fixed at 5% thereon.
#Exponential - 1% at level 4, 2% at level 5, 4% at level 6, 8% at level 7 and fixed at 8% thereon.
#Given an example for liner threshold, order should be linear.
THRESHOLD_GEN_FORMULA_AFTER_LEVEL_3=4:1,5:2,6:3,7:4,8:5
# No of Precis Stages to Run.
NO_OF_STAGES=10

#Dump Dim Val Feeds
DUMP_DIM_FEED=false

#Dump Bit Set Input Feed
DUMP_BITSET_FEED=false

#Ignore the following words in records of the data.
IGN_WORDS=null,,0

#Hierarchy Fields enable, fields like gt50,gt60,gt70 which has value true or false
HIERARCHY_DIMS_ENABLED=true

#List of Comma Seperated Hierarchy Dim Groups, Groups are Seperated by ":"
#example "lt20,lt30,lt40:gt10,gt20,gt30" tells there are 2 hierarchy groups(lt & gt), candidate removal logic will be applied only
#within a group
HIERARCHY_DIM_GROUPS=lt10,lt50,lt75,lt100

#Logging Data (for fast execution)
LOGGING_ENABLED=true
#4 levels of logging DEBUG,INFO,WARN,ERROR
LOGGING_LEVEL=INFO

######################################################################################################################################

#New things to add for Thiyag 12th Nov 2016

#1.a
#Avoid joins at each level between some columns that form a natural Hierarchy
 #A Pincode/Zipcode implies a city or town or village which implies a county or district which implies a state or province which implies a country which implies a continent
 #Such cross joins should be stopped at candidate generation stage at level 2 itself so that
 #City=Bengaluru and State=Karnataka 
 #These values must be dimensions
HIERARCHY_FIELDS=<COL_A>:<COL_B>;<COL_B>:<COL_C>
#implicitly the user may not want to join COL_A with COL_C. This needs to be raised in the UI if the user wants to do it or not and added to the HIERARCHY_FIELDS list

#1.b
#Since the HIERARCHY is predefined, we should automatically be able to drill down or show pie charts from the HIERARCHY_FIELDS example
#If We have an FIS  Gender=Female and Age=20-27 and State=Karnataka, the user may want to see only the Gender=Female and Age=20-27 for cities in Karnataka
#This will require a file called HIERARCHY_VALUES_FILE which will have STATE=KARNATAKA-CITIES=BENGALURU;MYSURU,MANGALURU,SHIMOGA,BIJAPUR,HASSAN ...
HIERARCHY_VALUES_FILE=State_Cities.txt;City_Pincodes.txt;State_pincodes.txt

#1.c
#Date
#We should be able to identify Fields from the UI and automatically put YYYYMMDD formats
#Just like HIERARCHY_FIELDS explained above, we should be able to create new columns for date(YYYYMMDD) like month(YYYYMM), week(YYYYWW) and year(YYYY) and avoid the joins based on them
HIERARCHY_FIELDS=DATE:WEEK;DATE:MONTH;DATE:YEAR;MONTH:YEAR

#2
#Compute all true values until level 1 or level 2 or level 3 ignoring support threshold and from next level onwards apply support Threshold
IGN_SUPPORT_THRESHOLD_UNTIL_INCLUSIVE_OF_LEVEL=2 
#This must respect HIERARCHY_FIELDS to avoid wasteful FIS from being generated

#3.a
#Discritization of Metrics
 #There are two types of Binning that we support FIXED_WIDTH and FREQUENCY_BINNING
 #NOTE: This can only work in case the input data is raw events and not aggregates so we will need another flag DATA_KIND
DATA_KIND=<RAW_EVENTS> 
#The other option is DATA_KIND=<AGGREGATE> which would make the flag below wrong so we must throw error that AGGREGATE does not make sense with METRIC_DISCRETIZATION     
METRIC_DISCRETIZATION=<METRIC_NAME>:<FREQUENCY_BINNING or FIXED_WIDTH>:<NUMBER_OF_BINS or WIDTH_SIZE>;<METRIC_NAME>:<FREQUENCY_BINNING or FIXED_WIDTH>:<NUMBER_OF_BINS or WIDTH_SIZE>

#3.b
#Similarly there may be another field called CUMMULATIVE_METRIC_DISCRETIZATION, here we pivot a metric like say REVENUE into multiple columns which should not be joined with each other 
#as they are also a part of HIERARCHY_FIELDS as explained earlier
 #example
 #REVENUE_LESS_THAN_1000,REVENUE_LESS_THAN_2000, REVENUE_LESS_THAN_3000, etc  


#4
#Delayed Joins for Id replacement
 #Ids may have been used in Fact Table 
 #For Example
   #Country=India may have been represented as 
   #CountryId=1
   #To Mitigate this so that data processing using precis of Gist is fast and the data Smaller in size, we can do delayed replacement for the actual consumable itemsets
   #So an FIS CountryId=1 and GenderId=1 will get replaced at delayed query time with equivalence where CountryId=1 is Country=India and GenderId=1 is Gender=Female
REPLACE_ID_COLUMN_FROM_FILE=<COLUMN_NAME>:<LOOKUP_FILE_NAME>;<COLUMN_NAME2>:<LOOKUP_FILE_NAME2>;   
   

